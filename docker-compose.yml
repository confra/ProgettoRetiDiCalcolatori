version: '3.8'

services:
  nginx:
    build: "./containers/nginx"
    ports:
      - "80:80"
    container_name: "nginx"
    networks:
      - app
    links:
      - node1:node1
      - node2:node2
      - node3:node3
    depends_on:
      - node1
      - node2
      - node3
    
  node1:
    build: "./containers/node"
    container_name: "node1"
    ports:
      - "3000"
    networks:
      - app
      - db  
      - amqp
    depends_on:
      - rabbitmq
    
    links:
      - couchdb
    environment: 
      - INSTANCE=node1

  node2:
    build: "./containers/node"
    container_name: "node2"
    ports:
      - "3000"
    networks:
      - app
      - db
      - amqp
    depends_on:
      - rabbitmq
    links:
      - couchdb
    environment: 
      - INSTANCE=node2

  node3:
    build: "./containers/node"
    container_name: "node3"
    ports:
      - "3000"
    networks:
      - app
      - db
      - amqp
    depends_on:
      - rabbitmq
    links:
      - couchdb
    environment: 
      - INSTANCE=node3
  
  couchdb:
    build:
      context: .
      dockerfile: containers/couchdb/test.Dockerfile
    restart: always
    ports:
      - "5984:5984"
    environment:
      - INSTANCE=couchdb
      - COUCHDB_SERVER=http://couchdb:5984/
    networks:
      - db
    volumes:
      - ./containers/couchdb/db_data:/opt/couchdb/data:rw

  nodemailer:
    build: "./containers/nodemailer"
    container_name: "nodemailer"
    networks:
      - amqp
    depends_on:
      - rabbitmq
  
  rabbitmq:
    build: "./containers/rabbitmq"
    container_name: "rabbitmq"
    networks:
      - amqp

networks:
  app:
    driver: bridge
  db:
    driver: bridge
  amqp:
    driver: bridge